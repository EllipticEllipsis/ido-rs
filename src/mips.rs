use std::fmt;

use strum_macros::{Display, EnumIter, FromRepr};

#[allow(non_camel_case_types)]
#[derive(Clone, Copy, Debug, PartialEq, EnumIter, FromRepr)]
pub enum register {
    // GPR
    xr0,
    xr1,
    xr2,
    xr3,
    xr4,
    xr5,
    xr6,
    xr7,
    xr8,
    xr9,
    xr10,
    xr11,
    xr12,
    xr13,
    xr14,
    xr15,
    xr16,
    xr17,
    xr18,
    xr19,
    xr20,
    xr21,
    xr22,
    xr23,
    xr24,
    xr25,
    xr26,
    xr27,
    xr28,
    xr29,
    xr30,
    xr31,
    // FPR
    xfr0,
    xfr1,
    xfr2,
    xfr3,
    xfr4,
    xfr5,
    xfr6,
    xfr7,
    xfr8,
    xfr9,
    xfr10,
    xfr11,
    xfr12,
    xfr13,
    xfr14,
    xfr15,
    xfr16,
    xfr17,
    xfr18,
    xfr19,
    xfr20,
    xfr21,
    xfr22,
    xfr23,
    xfr24,
    xfr25,
    xfr26,
    xfr27,
    xfr28,
    xfr29,
    xfr30,
    xfr31,
    // Float control regs?
    xfcc0,
    xfcc1,
    xfcc2,
    xfcc3,
    xfcc4,
    xfcc5,
    xfcc6,
    xfcc7,
    xnoreg,
}

impl fmt::Display for register {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        // Only numeric for now for simplicity
        write!(f, "{}", match self {
            register::xr0 => "$0",
            register::xr1 => "$1",
            register::xr2 => "$2",
            register::xr3 => "$3",
            register::xr4 => "$4",
            register::xr5 => "$5",
            register::xr6 => "$6",
            register::xr7 => "$7",
            register::xr8 => "$8",
            register::xr9 => "$9",
            register::xr10 => "$10",
            register::xr11 => "$11",
            register::xr12 => "$12",
            register::xr13 => "$13",
            register::xr14 => "$14",
            register::xr15 => "$15",
            register::xr16 => "$16",
            register::xr17 => "$17",
            register::xr18 => "$18",
            register::xr19 => "$19",
            register::xr20 => "$20",
            register::xr21 => "$21",
            register::xr22 => "$22",
            register::xr23 => "$23",
            register::xr24 => "$24",
            register::xr25 => "$25",
            register::xr26 => "$26",
            register::xr27 => "$27",
            register::xr28 => "$28",
            register::xr29 => "$29",
            register::xr30 => "$30",
            register::xr31 => "$31",
            register::xfr0 => "$f0",
            register::xfr1 => "$f1",
            register::xfr2 => "$f2",
            register::xfr3 => "$f3",
            register::xfr4 => "$f4",
            register::xfr5 => "$f5",
            register::xfr6 => "$f6",
            register::xfr7 => "$f7",
            register::xfr8 => "$f8",
            register::xfr9 => "$f9",
            register::xfr10 => "$f10",
            register::xfr11 => "$f11",
            register::xfr12 => "$f12",
            register::xfr13 => "$f13",
            register::xfr14 => "$f14",
            register::xfr15 => "$f15",
            register::xfr16 => "$f16",
            register::xfr17 => "$f17",
            register::xfr18 => "$f18",
            register::xfr19 => "$f19",
            register::xfr20 => "$f20",
            register::xfr21 => "$f21",
            register::xfr22 => "$f22",
            register::xfr23 => "$f23",
            register::xfr24 => "$f24",
            register::xfr25 => "$f25",
            register::xfr26 => "$f26",
            register::xfr27 => "$f27",
            register::xfr28 => "$f28",
            register::xfr29 => "$f29",
            register::xfr30 => "$f30",
            register::xfr31 => "$f31",
            register::xfcc0 => "xfcc0",
            register::xfcc1 => "xfcc1",
            register::xfcc2 => "xfcc2",
            register::xfcc3 => "xfcc3",
            register::xfcc4 => "xfcc4",
            register::xfcc5 => "xfcc5",
            register::xfcc6 => "xfcc6",
            register::xfcc7 => "xfcc7",
            register::xnoreg => "xnoreg",
        })
    }
}

#[allow(non_camel_case_types)]
#[derive(Clone, Copy, Debug, Display, PartialEq, EnumIter, FromRepr)]
pub enum GPR {
    zero,
    AT,
    v0,
    v1,
    a0,
    a1,
    a2,
    a3,
    t0,
    t1,
    t2,
    t3,
    t4,
    t5,
    t6,
    t7,
    s0,
    s1,
    s2,
    s3,
    s4,
    s5,
    s6,
    s7,
    t8,
    t9,
    k0,
    k1,
    gp,
    sp,
    fp, // or t8
    ra,
}

// asmcodes specify the assembler instructions
#[allow(non_camel_case_types)]
#[derive(Clone, Copy, PartialEq, EnumIter, FromRepr)]
pub enum asmcode {
    zabs,
    zadd,
    zaddu,
    zand,
    zb,
    zbc0f,
    zbc0t,
    zbc1f,
    zbc1t,
    zbc2f,
    zbc2t,
    zlgota,
    z12,
    zbeq,
    zbge,
    zbgeu,
    zbgez,
    zbgt,
    zbgtu,
    zbgtz,
    zble,
    zbleu,
    zblez,
    zblt,
    zbltu,
    zbltz,
    zbne,
    zbreak,
    zc0,
    zc1,
    zc2,
    z31,
    zdiv,
    zdivu,
    zj,
    zjal,
    zla,
    zlb,
    zlbu,
    zlh,
    zlhu,
    zli,
    zlw,
    zjr,
    zlwc1,
    zlwc2,
    zpref,
    zmfhi,
    zmflo,
    zmove,
    zjalr,
    zswc1,
    zswc2,
    z53,
    zmthi,
    zmtlo,
    zmul,
    zmulo,
    zmulou,
    zmult,
    zmultu,
    zneg,
    znop,
    znor,
    zor,
    zrem,
    zremu,
    zrfe,
    zrol,
    zror,
    zsb,
    zseq,
    zsge,
    zsgeu,
    zsgt,
    zsgtu,
    zsh,
    zsle,
    zsleu,
    zsll,
    zslt,
    zsltu,
    zsne,
    zsra,
    zsrl,
    zsub,
    zsubu,
    zsw,
    zsyscall,
    zxor,
    znot,
    zlwl,
    zlwr,
    zswl,
    zswr,
    zvcall,
    zmfc0,
    zmfc1,
    zmfc2,
    z99,
    zmtc0,
    zmtc1,
    zmtc2,
    zsync,
    ztlbr,
    ztlbwi,
    ztlbwr,
    ztlbp,
    zld,
    zsd,
    z110,
    zldc1,
    zldc2,
    ztlbr1,
    ztlbp1,
    zsdc1,
    zsdc2,
    z117,
    fl_s,
    fl_d,
    fl_e,
    fs_s,
    fs_d,
    fs_e,
    fadd_s,
    fadd_d,
    fadd_e,
    fsub_s,
    fsub_d,
    fsub_e,
    fmul_s,
    fmul_d,
    fmul_e,
    fdiv_s,
    fdiv_d,
    fdiv_e,
    fsqrt_s,
    fsqrt_d,
    fsqrt_e,
    fmov_s,
    fmov_d,
    fmov_e,
    fabs_s,
    fabs_d,
    fabs_e,
    fcvt_s_d,
    fcvt_s_e,
    fcvt_s_w,
    fcvt_d_s,
    fcvt_d_e,
    fcvt_d_w,
    fcvt_e_s,
    fcvt_e_d,
    fcvt_e_w,
    fcvt_w_s,
    fcvt_w_d,
    fcvt_w_e,
    fc_f_s,
    fc_f_d,
    fc_f_e,
    fc_un_s,
    fc_un_d,
    fc_un_e,
    fc_eq_s,
    fc_eq_d,
    fc_eq_e,
    fc_ueq_s,
    fc_ueq_d,
    fc_ueq_e,
    fc_olt_s,
    fc_olt_d,
    fc_olt_e,
    fc_ult_s,
    fc_ult_d,
    fc_ult_e,
    fc_ole_s,
    fc_ole_d,
    fc_ole_e,
    fc_ule_s,
    fc_ule_d,
    fc_ule_e,
    fc_sf_s,
    fc_sf_d,
    fc_sf_e,
    fc_ngle_s,
    fc_ngle_d,
    fc_ngle_e,
    fc_seq_s,
    fc_seq_d,
    fc_seq_e,
    fc_ngl_s,
    fc_ngl_d,
    fc_ngl_e,
    fc_lt_s,
    fc_lt_d,
    fc_lt_e,
    fc_nge_s,
    fc_nge_d,
    fc_nge_e,
    fc_le_s,
    fc_le_d,
    fc_le_e,
    fc_ngt_s,
    fc_ngt_d,
    fc_ngt_e,
    zlui,
    zulw,
    zulh,
    zulhu,
    zusw,
    zush,
    zaddi,
    zaddiu,
    zslti,
    zsltiu,
    zandi,
    zori,
    zxori,
    z218,
    znegu,
    zbeqz,
    zbnez,
    fneg_s,
    fneg_d,
    fneg_e,
    zcfc1,
    zctc1,
    zbal,
    zbgezal,
    zbltzal,
    zmtc1_d,
    zmfc1_d,
    ztrunc_w_s,
    ztrunc_w_d,
    ztrunc_w_e,
    zround_w_s,
    zround_w_d,
    zround_w_e,
    zaddou,
    zsubou,
    ztruncu_w_s,
    ztruncu_w_d,
    ztruncu_w_e,
    zroundu_w_s,
    zroundu_w_d,
    zroundu_w_e,
    zcfc0,
    zcfc2,
    z248,
    zctc0,
    zctc2,
    z251,
    fli_s,
    fli_d,
    fli_e,
    ztlt,
    ztltu,
    ztge,
    ztgeu,
    zteq,
    ztne,
    zll,
    zsc,
    zceil_w_s,
    zceil_w_d,
    zceil_w_e,
    zceilu_w_s,
    zceilu_w_d,
    zceilu_w_e,
    zfloor_w_s,
    zfloor_w_d,
    zfloor_w_e,
    zflooru_w_s,
    zflooru_w_d,
    zflooru_w_e,
    zbeql,
    zbeqzl,
    zbnel,
    zbnezl,
    zblel,
    zbleul,
    zblezl,
    zbgtl,
    zbgtul,
    zbgtzl,
    zbltl,
    zbltul,
    zbltzl,
    zbltzall,
    zbgel,
    zbgeul,
    zbgezl,
    zbgezall,
    zbc0fl,
    zbc0tl,
    zbc1fl,
    zbc1tl,
    zbc2fl,
    zbc2tl,
    z299,
    z300,
    zldl,
    zldr,
    zlld,
    zlwu,
    zsdl,
    zsdr,
    zscd,
    zdaddi,
    zdaddiu,
    zdadd,
    zdaddu,
    zdsub,
    zdsubu,
    zdsll,
    zdsrl,
    zdsra,
    zdsllv,
    zdsrlv,
    zdsrav,
    zdmult,
    zdmultu,
    zddiv,
    zddivu,
    zlsc1,
    zssc1,
    zdmtc1,
    zdmfc1,
    zdmtc0,
    zdmfc0,
    zdmtc2,
    zdmfc2,
    zdli,
    zdla,
    zeret,
    ztrunc_l_s,
    zround_l_s,
    zceil_l_s,
    zfloor_l_s,
    ztrunc_l_d,
    zround_l_d,
    zceil_l_d,
    zfloor_l_d,
    ztrunc_l_e,
    zround_l_e,
    zceil_l_e,
    zfloor_l_e,
    fcvt_l_s,
    fcvt_l_d,
    fcvt_l_e,
    fcvt_l_w,
    fcvt_s_l,
    fcvt_d_l,
    fcvt_e_l,
    fcvt_w_l,
    zcache,
    zcia,
    zuld,
    zusd,
    zdabs,
    zdneg,
    zdnegu,
    zdmul,
    zdmulo,
    zdmulou,
    zdrem,
    zdremu,
    zdrol,
    zdror,
    zdaddou,
    zdsubou,
    zulwu,
    zmovt,
    zmovf,
    zmovn,
    zmovz,
    fmadd_s,
    fmadd_d,
    fmadd_e,
    fmsub_s,
    fmsub_d,
    fmsub_e,
    fnmadd_s,
    fnmadd_d,
    fnmadd_e,
    fnmsub_s,
    fnmsub_d,
    fnmsub_e,
    frecip_s,
    frecip_d,
    frsqrt_s,
    frsqrt_d,
    fmovt_s,
    fmovt_d,
    fmovf_s,
    fmovf_d,
    fmovn_s,
    fmovn_d,
    fmovz_s,
    fmovz_d,
    zlwxc1,
    zldxc1,
    zswxc1,
    zsdxc1,
    zpfetch,
    zdctr,
    zdctw,
    ztlbw,
    znada,
    zssnop,
    zdsll32,
    zdsrl32,
    zdsra32,
    zbc3f,
    zbc3t,
    zc3,
    zlwc3,
    zswc3,
    zmfc3,
    zmtc3,
    zcfc3,
    zctc3,
    zsllv,
    zsrlv,
    zsrav,
    zmfpc,
    zmtpc,
    zmfps,
    zmtps,
    zbad,
}

impl fmt::Display for asmcode {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "{}",
            match self {
                asmcode::zabs => "abs       ",
                asmcode::zadd => "add       ",
                asmcode::zaddu => "addu      ",
                asmcode::zand => "and       ",
                asmcode::zb => "b         ",
                asmcode::zbc0f => "bc0f      ",
                asmcode::zbc0t => "bc0t      ",
                asmcode::zbc1f => "bc1f      ",
                asmcode::zbc1t => "bc1t      ",
                asmcode::zbc2f => "bc2f      ",
                asmcode::zbc2t => "bc2t      ",
                asmcode::zlgota => "bad       ",
                asmcode::z12 => "bad       ",
                asmcode::zbeq => "beq       ",
                asmcode::zbge => "bge       ",
                asmcode::zbgeu => "bgeu      ",
                asmcode::zbgez => "bgez      ",
                asmcode::zbgt => "bgt       ",
                asmcode::zbgtu => "bgtu      ",
                asmcode::zbgtz => "bgtz      ",
                asmcode::zble => "ble       ",
                asmcode::zbleu => "bleu      ",
                asmcode::zblez => "blez      ",
                asmcode::zblt => "blt       ",
                asmcode::zbltu => "bltu      ",
                asmcode::zbltz => "bltz      ",
                asmcode::zbne => "bne       ",
                asmcode::zbreak => "break     ",
                asmcode::zc0 => "c0        ",
                asmcode::zc1 => "c1        ",
                asmcode::zc2 => "c2        ",
                asmcode::z31 => "bad       ",
                asmcode::zdiv => "div       ",
                asmcode::zdivu => "divu      ",
                asmcode::zj => "j         ",
                asmcode::zjal => "jal       ",
                asmcode::zla => "la        ",
                asmcode::zlb => "lb        ",
                asmcode::zlbu => "lbu       ",
                asmcode::zlh => "lh        ",
                asmcode::zlhu => "lhu       ",
                asmcode::zli => "li        ",
                asmcode::zlw => "lw        ",
                asmcode::zjr => "jr        ",
                asmcode::zlwc1 => "lwc1      ",
                asmcode::zlwc2 => "lwc2      ",
                asmcode::zpref => "bad       ",
                asmcode::zmfhi => "mfhi      ",
                asmcode::zmflo => "mflo      ",
                asmcode::zmove => "move      ",
                asmcode::zjalr => "jalr      ",
                asmcode::zswc1 => "swc1      ",
                asmcode::zswc2 => "swc2      ",
                asmcode::z53 => "bad       ",
                asmcode::zmthi => "mthi      ",
                asmcode::zmtlo => "mtlo      ",
                asmcode::zmul => "mul       ",
                asmcode::zmulo => "mulo      ",
                asmcode::zmulou => "mulou     ",
                asmcode::zmult => "mult      ",
                asmcode::zmultu => "multu     ",
                asmcode::zneg => "neg       ",
                asmcode::znop => "nop       ",
                asmcode::znor => "nor       ",
                asmcode::zor => "or        ",
                asmcode::zrem => "rem       ",
                asmcode::zremu => "remu      ",
                asmcode::zrfe => "rfe       ",
                asmcode::zrol => "rol       ",
                asmcode::zror => "ror       ",
                asmcode::zsb => "sb        ",
                asmcode::zseq => "seq       ",
                asmcode::zsge => "sge       ",
                asmcode::zsgeu => "sgeu      ",
                asmcode::zsgt => "sgt       ",
                asmcode::zsgtu => "sgtu      ",
                asmcode::zsh => "sh        ",
                asmcode::zsle => "sle       ",
                asmcode::zsleu => "sleu      ",
                asmcode::zsll => "sll       ",
                asmcode::zslt => "slt       ",
                asmcode::zsltu => "sltu      ",
                asmcode::zsne => "sne       ",
                asmcode::zsra => "sra       ",
                asmcode::zsrl => "srl       ",
                asmcode::zsub => "sub       ",
                asmcode::zsubu => "subu      ",
                asmcode::zsw => "sw        ",
                asmcode::zsyscall => "syscall   ",
                asmcode::zxor => "xor       ",
                asmcode::znot => "not       ",
                asmcode::zlwl => "lwl       ",
                asmcode::zlwr => "lwr       ",
                asmcode::zswl => "swl       ",
                asmcode::zswr => "swr       ",
                asmcode::zvcall => "vcall     ",
                asmcode::zmfc0 => "mfc0      ",
                asmcode::zmfc1 => "mfc1      ",
                asmcode::zmfc2 => "mfc2      ",
                asmcode::z99 => "bad       ",
                asmcode::zmtc0 => "mtc0      ",
                asmcode::zmtc1 => "mtc1      ",
                asmcode::zmtc2 => "mtc2      ",
                asmcode::zsync => "bad       ",
                asmcode::ztlbr => "tlbr      ",
                asmcode::ztlbwi => "tlbwi     ",
                asmcode::ztlbwr => "tlbwr     ",
                asmcode::ztlbp => "tlbp      ",
                asmcode::zld => "ld        ",
                asmcode::zsd => "sd        ",
                asmcode::z110 => "z110      ",
                asmcode::zldc1 => "ldc1      ",
                asmcode::zldc2 => "ldc2      ",
                asmcode::ztlbr1 => "bad       ",
                asmcode::ztlbp1 => "tlbp1     ",
                asmcode::zsdc1 => "sdc1      ",
                asmcode::zsdc2 => "sds2      ",
                asmcode::z117 => "bad       ",
                asmcode::fl_s => "l.s       ",
                asmcode::fl_d => "l.d       ",
                asmcode::fl_e => "l.e       ",
                asmcode::fs_s => "s.s       ",
                asmcode::fs_d => "s.d       ",
                asmcode::fs_e => "s.e       ",
                asmcode::fadd_s => "add.s     ",
                asmcode::fadd_d => "add.d     ",
                asmcode::fadd_e => "add.e     ",
                asmcode::fsub_s => "sub.s     ",
                asmcode::fsub_d => "sub.d     ",
                asmcode::fsub_e => "sub.e     ",
                asmcode::fmul_s => "mul.s     ",
                asmcode::fmul_d => "mul.d     ",
                asmcode::fmul_e => "mul.e     ",
                asmcode::fdiv_s => "div.s     ",
                asmcode::fdiv_d => "div.d     ",
                asmcode::fdiv_e => "div.e     ",
                asmcode::fsqrt_s => "sqrt.s    ",
                asmcode::fsqrt_d => "sqrt.d    ",
                asmcode::fsqrt_e => "sqrt.e    ",
                asmcode::fmov_s => "mov.s     ",
                asmcode::fmov_d => "mov.d     ",
                asmcode::fmov_e => "mov.e     ",
                asmcode::fabs_s => "abs.s     ",
                asmcode::fabs_d => "abs.d     ",
                asmcode::fabs_e => "abs.e     ",
                asmcode::fcvt_s_d => "cvt.s.d   ",
                asmcode::fcvt_s_e => "cvt.s.e   ",
                asmcode::fcvt_s_w => "cvt.s.w   ",
                asmcode::fcvt_d_s => "cvt.d.s   ",
                asmcode::fcvt_d_e => "cvt.d.e   ",
                asmcode::fcvt_d_w => "cvt.d.w   ",
                asmcode::fcvt_e_s => "cvt.e.s   ",
                asmcode::fcvt_e_d => "cvt.e.d   ",
                asmcode::fcvt_e_w => "cvt.e.w   ",
                asmcode::fcvt_w_s => "cvt.w.s   ",
                asmcode::fcvt_w_d => "cvt.w.d   ",
                asmcode::fcvt_w_e => "cvt.w.e   ",
                asmcode::fc_f_s => "c.f.s     ",
                asmcode::fc_f_d => "c.f.d     ",
                asmcode::fc_f_e => "c.f.e     ",
                asmcode::fc_un_s => "c.un.s    ",
                asmcode::fc_un_d => "c.un.d    ",
                asmcode::fc_un_e => "c.un.e    ",
                asmcode::fc_eq_s => "c.eq.s    ",
                asmcode::fc_eq_d => "c.eq.d    ",
                asmcode::fc_eq_e => "c.eq.e    ",
                asmcode::fc_ueq_s => "c.ueq.s   ",
                asmcode::fc_ueq_d => "c.ueq.d   ",
                asmcode::fc_ueq_e => "c.ueq.e   ",
                asmcode::fc_olt_s => "c.olt.s   ",
                asmcode::fc_olt_d => "c.olt.d   ",
                asmcode::fc_olt_e => "c.olt.e   ",
                asmcode::fc_ult_s => "c.ult.s   ",
                asmcode::fc_ult_d => "c.ult.d   ",
                asmcode::fc_ult_e => "c.ult.e   ",
                asmcode::fc_ole_s => "c.ole.s   ",
                asmcode::fc_ole_d => "e.ole.d   ",
                asmcode::fc_ole_e => "c.ole.e   ",
                asmcode::fc_ule_s => "c.ule.s   ",
                asmcode::fc_ule_d => "c.ule.d   ",
                asmcode::fc_ule_e => "c.ule.e   ",
                asmcode::fc_sf_s => "c.sf.s    ",
                asmcode::fc_sf_d => "c.sf.d    ",
                asmcode::fc_sf_e => "c.sf.e    ",
                asmcode::fc_ngle_s => "c.ngle.s  ",
                asmcode::fc_ngle_d => "c.ngle.d  ",
                asmcode::fc_ngle_e => "c.ngle.e  ",
                asmcode::fc_seq_s => "c.seq.s   ",
                asmcode::fc_seq_d => "c.seq.d   ",
                asmcode::fc_seq_e => "c.seq.e   ",
                asmcode::fc_ngl_s => "c.ngl.s   ",
                asmcode::fc_ngl_d => "c.ngl.d   ",
                asmcode::fc_ngl_e => "c.ngl.e   ",
                asmcode::fc_lt_s => "c.lt.s    ",
                asmcode::fc_lt_d => "c.lt.d    ",
                asmcode::fc_lt_e => "c.lt.e    ",
                asmcode::fc_nge_s => "c.nge.s   ",
                asmcode::fc_nge_d => "c.nge.d   ",
                asmcode::fc_nge_e => "c.nge.e   ",
                asmcode::fc_le_s => "c.le.s    ",
                asmcode::fc_le_d => "c.le.d    ",
                asmcode::fc_le_e => "c.le.e    ",
                asmcode::fc_ngt_s => "c.ngt.s   ",
                asmcode::fc_ngt_d => "c.ngt.d   ",
                asmcode::fc_ngt_e => "c.ngt.d   ",
                asmcode::zlui => "lui       ",
                asmcode::zulw => "ulw       ",
                asmcode::zulh => "ulh       ",
                asmcode::zulhu => "ulhu      ",
                asmcode::zusw => "usw       ",
                asmcode::zush => "ush       ",
                asmcode::zaddi => "addi      ",
                asmcode::zaddiu => "addiu     ",
                asmcode::zslti => "slti      ",
                asmcode::zsltiu => "sltiu     ",
                asmcode::zandi => "andi      ",
                asmcode::zori => "ori       ",
                asmcode::zxori => "xori      ",
                asmcode::z218 => "z218      ",
                asmcode::znegu => "negu      ",
                asmcode::zbeqz => "beqz      ",
                asmcode::zbnez => "bnez      ",
                asmcode::fneg_s => "neg.s     ",
                asmcode::fneg_d => "neg.d     ",
                asmcode::fneg_e => "neg.e     ",
                asmcode::zcfc1 => "cfc1      ",
                asmcode::zctc1 => "ctc1      ",
                asmcode::zbal => "bal       ",
                asmcode::zbgezal => "bgezal    ",
                asmcode::zbltzal => "bltzal    ",
                asmcode::zmtc1_d => "mtc1.d    ",
                asmcode::zmfc1_d => "mfc1.d    ",
                asmcode::ztrunc_w_s => "trunc.w.s ",
                asmcode::ztrunc_w_d => "trunc.w.d ",
                asmcode::ztrunc_w_e => "trunc.w.e ",
                asmcode::zround_w_s => "round.w.s ",
                asmcode::zround_w_d => "round.w.d ",
                asmcode::zround_w_e => "round.w.e ",
                asmcode::zaddou => "addou     ",
                asmcode::zsubou => "subou     ",
                asmcode::ztruncu_w_s => "truncu.w.s",
                asmcode::ztruncu_w_d => "truncu.w.d",
                asmcode::ztruncu_w_e => "truncu.w.e",
                asmcode::zroundu_w_s => "roundu.w.s",
                asmcode::zroundu_w_d => "roundu.w.d",
                asmcode::zroundu_w_e => "roundu.w.e",
                asmcode::zcfc0 => "cfc0      ",
                asmcode::zcfc2 => "cfc2      ",
                asmcode::z248 => "bad       ",
                asmcode::zctc0 => "ctc0      ",
                asmcode::zctc2 => "ctc2      ",
                asmcode::z251 => "bad       ",
                asmcode::fli_s => "li.s      ",
                asmcode::fli_d => "li.d      ",
                asmcode::fli_e => "li.e      ",
                asmcode::ztlt => "tlt       ",
                asmcode::ztltu => "tltu      ",
                asmcode::ztge => "tge       ",
                asmcode::ztgeu => "tgeu      ",
                asmcode::zteq => "teq       ",
                asmcode::ztne => "tne       ",
                asmcode::zll => "ll        ",
                asmcode::zsc => "sc        ",
                asmcode::zceil_w_s => "ceil.w.s  ",
                asmcode::zceil_w_d => "ceil.w.d  ",
                asmcode::zceil_w_e => "ceil.w.e  ",
                asmcode::zceilu_w_s => "ceilu.w.s ",
                asmcode::zceilu_w_d => "ceilu.w.d ",
                asmcode::zceilu_w_e => "ceilu.w.e ",
                asmcode::zfloor_w_s => "floor.w.s ",
                asmcode::zfloor_w_d => "floor.w.d ",
                asmcode::zfloor_w_e => "floor.w.e ",
                asmcode::zflooru_w_s => "flooru.w.s",
                asmcode::zflooru_w_d => "flooru.w.d",
                asmcode::zflooru_w_e => "flooru.w.e",
                asmcode::zbeql => "beql      ",
                asmcode::zbeqzl => "beqzl     ",
                asmcode::zbnel => "bnel      ",
                asmcode::zbnezl => "bnezl     ",
                asmcode::zblel => "blel      ",
                asmcode::zbleul => "bleul     ",
                asmcode::zblezl => "blezl     ",
                asmcode::zbgtl => "zbgtl     ",
                asmcode::zbgtul => "bgtul     ",
                asmcode::zbgtzl => "bgtzl     ",
                asmcode::zbltl => "bltl      ",
                asmcode::zbltul => "bltul     ",
                asmcode::zbltzl => "bltzl     ",
                asmcode::zbltzall => "bltzall   ",
                asmcode::zbgel => "bgel      ",
                asmcode::zbgeul => "bgeul     ",
                asmcode::zbgezl => "bgezl     ",
                asmcode::zbgezall => "bgezall   ",
                asmcode::zbc0fl => "bc0fl     ",
                asmcode::zbc0tl => "bc0tl     ",
                asmcode::zbc1fl => "bc1fl     ",
                asmcode::zbc1tl => "bc1tl     ",
                asmcode::zbc2fl => "bc2fl     ",
                asmcode::zbc2tl => "bc2tl     ",
                asmcode::z299 => "bad       ",
                asmcode::z300 => "bad       ",
                asmcode::zldl => "ldl       ",
                asmcode::zldr => "ldr       ",
                asmcode::zlld => "lld       ",
                asmcode::zlwu => "lwu       ",
                asmcode::zsdl => "sdl       ",
                asmcode::zsdr => "sdr       ",
                asmcode::zscd => "scd       ",
                asmcode::zdaddi => "daddi     ",
                asmcode::zdaddiu => "daddiu    ",
                asmcode::zdadd => "dadd      ",
                asmcode::zdaddu => "daddu     ",
                asmcode::zdsub => "dsub      ",
                asmcode::zdsubu => "dsubu     ",
                asmcode::zdsll => "dsll      ",
                asmcode::zdsrl => "dsrl      ",
                asmcode::zdsra => "dsra      ",
                asmcode::zdsllv => "dsllv     ",
                asmcode::zdsrlv => "dsrlv     ",
                asmcode::zdsrav => "dsrav     ",
                asmcode::zdmult => "dmult     ",
                asmcode::zdmultu => "dmultu    ",
                asmcode::zddiv => "ddiv      ",
                asmcode::zddivu => "ddivu     ",
                asmcode::zlsc1 => "lsc1      ",
                asmcode::zssc1 => "ssc1      ",
                asmcode::zdmtc1 => "dmtc1     ",
                asmcode::zdmfc1 => "dmfc1     ",
                asmcode::zdmtc0 => "dmtc0     ",
                asmcode::zdmfc0 => "dmfc0     ",
                asmcode::zdmtc2 => "dmtc2     ",
                asmcode::zdmfc2 => "dmfc2     ",
                asmcode::zdli => "dli       ",
                asmcode::zdla => "dla       ",
                asmcode::zeret => "eret      ",
                asmcode::ztrunc_l_s => "trunc.l.s ",
                asmcode::zround_l_s => "zround.l.s",
                asmcode::zceil_l_s => "ceil.l.s  ",
                asmcode::zfloor_l_s => "floor.l.s ",
                asmcode::ztrunc_l_d => "trunc.l.d ",
                asmcode::zround_l_d => "zround.l.d",
                asmcode::zceil_l_d => "ceil.l.d  ",
                asmcode::zfloor_l_d => "floor.l.d ",
                asmcode::ztrunc_l_e => "trunc.l.e ",
                asmcode::zround_l_e => "round.l.e ",
                asmcode::zceil_l_e => "ceil.l.e  ",
                asmcode::zfloor_l_e => "floor.l.e ",
                asmcode::fcvt_l_s => "cvt.l.s   ",
                asmcode::fcvt_l_d => "cvt.l.d   ",
                asmcode::fcvt_l_e => "cvt.l.e   ",
                asmcode::fcvt_l_w => "cvt.l.w   ",
                asmcode::fcvt_s_l => "cvt.s.l   ",
                asmcode::fcvt_d_l => "cvt.d.l   ",
                asmcode::fcvt_e_l => "cvt.e.l   ",
                asmcode::fcvt_w_l => "cvt.w.l   ",
                asmcode::zcache => "cache     ",
                asmcode::zcia => "cia       ",
                asmcode::zuld => "uld       ",
                asmcode::zusd => "usd       ",
                asmcode::zdabs => "dabs      ",
                asmcode::zdneg => "dneg      ",
                asmcode::zdnegu => "dnegu     ",
                asmcode::zdmul => "dmul      ",
                asmcode::zdmulo => "dmulo     ",
                asmcode::zdmulou => "dmulou    ",
                asmcode::zdrem => "drem      ",
                asmcode::zdremu => "dremu     ",
                asmcode::zdrol => "drol      ",
                asmcode::zdror => "dror      ",
                asmcode::zdaddou => "daddou    ",
                asmcode::zdsubou => "dsubou    ",
                asmcode::zulwu => "bad       ",
                asmcode::zmovt => "bad       ",
                asmcode::zmovf => "bad       ",
                asmcode::zmovn => "bad       ",
                asmcode::zmovz => "bad       ",
                asmcode::fmadd_s => "bad       ",
                asmcode::fmadd_d => "bad       ",
                asmcode::fmadd_e => "bad       ",
                asmcode::fmsub_s => "bad       ",
                asmcode::fmsub_d => "bad       ",
                asmcode::fmsub_e => "bad       ",
                asmcode::fnmadd_s => "bad       ",
                asmcode::fnmadd_d => "bad       ",
                asmcode::fnmadd_e => "bad       ",
                asmcode::fnmsub_s => "bad       ",
                asmcode::fnmsub_d => "bad       ",
                asmcode::fnmsub_e => "bad       ",
                asmcode::frecip_s => "bad       ",
                asmcode::frecip_d => "bad       ",
                asmcode::frsqrt_s => "bad       ",
                asmcode::frsqrt_d => "bad       ",
                asmcode::fmovt_s => "bad       ",
                asmcode::fmovt_d => "bad       ",
                asmcode::fmovf_s => "bad       ",
                asmcode::fmovf_d => "bad       ",
                asmcode::fmovn_s => "bad       ",
                asmcode::fmovn_d => "bad       ",
                asmcode::fmovz_s => "bad       ",
                asmcode::fmovz_d => "bad       ",
                asmcode::zlwxc1 => "bad       ",
                asmcode::zldxc1 => "bad       ",
                asmcode::zswxc1 => "bad       ",
                asmcode::zsdxc1 => "bad       ",
                asmcode::zpfetch => "bad       ",
                asmcode::zdctr => "bad       ",
                asmcode::zdctw => "bad       ",
                asmcode::ztlbw => "bad       ",
                asmcode::znada => "bad       ",
                asmcode::zssnop => "bad       ",
                asmcode::zdsll32 => "bad       ",
                asmcode::zdsrl32 => "bad       ",
                asmcode::zdsra32 => "bad       ",
                asmcode::zbc3f => "bad       ",
                asmcode::zbc3t => "bad       ",
                asmcode::zc3 => "bad       ",
                asmcode::zlwc3 => "bad       ",
                asmcode::zswc3 => "bad       ",
                asmcode::zmfc3 => "bad       ",
                asmcode::zmtc3 => "bad       ",
                asmcode::zcfc3 => "bad       ",
                asmcode::zctc3 => "bad       ",
                asmcode::zsllv => "bad       ",
                asmcode::zsrlv => "bad       ",
                asmcode::zsrav => "bad       ",
                asmcode::zmfpc => "bad       ",
                asmcode::zmtpc => "bad       ",
                asmcode::zmfps => "bad       ",
                asmcode::zmtps => "bad       ",
                asmcode::zbad => "bad       ",
            }
        )
    }
}

impl fmt::Debug for asmcode {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "\"{}\"", self)
    }
}

#[allow(non_camel_case_types)]
#[derive(Clone, Copy, Debug, PartialEq, EnumIter, FromRepr)]
pub enum format {
    frob,  // reg, offset(+/-32k), base
    fra,   // reg, [sym]+offset
    fri,   // reg, immed (32 bit)
    frrr,  // reg, reg, reg
    frri,  // reg, reg, immed (32 bit)
    frr,   // reg, reg
    fa,    // [sym]+offset [+(base)]
    fr,    // reg
    frrl,  // reg, reg, sym
    frl,   // reg, sym
    fl,    // sym
    forrr, // co processor if required?
    fril,  // reg, immed, label
    fi,    // immed
    foa,   // op, address
    frrrr, // reg, reg, reg, reg
}

#[allow(non_camel_case_types)]
#[derive(Clone, Copy, Debug, PartialEq, EnumIter, FromRepr)]
pub enum set_value {
    set_undefined,
    set_reorder,
    set_noreorder,
    set_macro,
    set_nomacro,
    set_at,
    set_noat,
    set_move,
    set_nomove,
    set_bopt,
    set_nobopt,
    set_volatile,
    set_novolatile,
    set_transform,
    set_notransform,
    set_reposition,
    set_noreposition,
}

impl fmt::Display for set_value {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "{}",
            match &self {
                set_value::set_undefined => "undefined",
                set_value::set_reorder => "reorder",
                set_value::set_noreorder => "noreorder",
                set_value::set_macro => "macro",
                set_value::set_nomacro => "nomacro",
                set_value::set_at => "at",
                set_value::set_noat => "noat",
                set_value::set_move => "move",
                set_value::set_nomove => "nomove",
                set_value::set_bopt => "bopt",
                set_value::set_nobopt => "nobopt",
                set_value::set_volatile => "volatile",
                set_value::set_novolatile => "novolatile",
                set_value::set_transform => "transform",
                set_value::set_notransform => "notransform",
                set_value::set_reposition => "reposition",
                set_value::set_noreposition => "noreposition",
            }
        )
    }
}

#[allow(non_camel_case_types)]
#[derive(Debug, PartialEq, EnumIter, FromRepr)]
pub enum Itype {
    ilabel,
    isym,
    iglobal,
    icpload,
    ialign,
    iascii,
    iasciiz,
    ibyte,
    icomm,
    ilcomm,
    idata,
    idouble,
    ifile,
    ifloat,
    ihalf,
    icprestore,
    igpword,
    icpadd,
    iweakext,
    iloopno,
    ispace,
    itext,
    iword,
    iocode,
    iend,
    isdata,
    irdata,
    ient,
    iloc,
    ibgnb,
    iendb,
    iasm0,
    iset,
    icpalias,
    irep,
    iendrep,
    ilab,
    ivreg,
    imask,
    ifmask,
    ierr,
    iglobabs,
    iverstamp,
    iframe,
    iextended,
    iextern,
    iaent,
    ioption,
    inoalias,
    ialias,
    imtag,
    imalias,
    istruct,
    ilivereg,
    igjaldef,
    igjallive,
    igjrlive,
    ishift_addr,
    irestext,
    idword,
    iprologue,
    iedata,
    ialloc,
}
